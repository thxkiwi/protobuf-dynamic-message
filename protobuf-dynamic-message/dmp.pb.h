// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dmp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dmp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dmp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dmp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dmp_2eproto;
class EngineSpecific;
struct EngineSpecificDefaultTypeInternal;
extern EngineSpecificDefaultTypeInternal _EngineSpecific_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EngineSpecific* Arena::CreateMaybeMessage<::EngineSpecific>(Arena*);
template<> ::State* Arena::CreateMaybeMessage<::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EngineSpecific final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EngineSpecific) */ {
 public:
  inline EngineSpecific() : EngineSpecific(nullptr) {}
  ~EngineSpecific() override;
  explicit constexpr EngineSpecific(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngineSpecific(const EngineSpecific& from);
  EngineSpecific(EngineSpecific&& from) noexcept
    : EngineSpecific() {
    *this = ::std::move(from);
  }

  inline EngineSpecific& operator=(const EngineSpecific& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineSpecific& operator=(EngineSpecific&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineSpecific& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngineSpecific* internal_default_instance() {
    return reinterpret_cast<const EngineSpecific*>(
               &_EngineSpecific_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngineSpecific& a, EngineSpecific& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineSpecific* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineSpecific* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EngineSpecific* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EngineSpecific>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngineSpecific& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EngineSpecific& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineSpecific* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EngineSpecific";
  }
  protected:
  explicit EngineSpecific(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgNameFieldNumber = 1,
    kMsgProtoFieldNumber = 2,
    kMsgContentFieldNumber = 3,
  };
  // string msg_name = 1;
  void clear_msg_name();
  const std::string& msg_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_name();
  PROTOBUF_NODISCARD std::string* release_msg_name();
  void set_allocated_msg_name(std::string* msg_name);
  private:
  const std::string& _internal_msg_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_name(const std::string& value);
  std::string* _internal_mutable_msg_name();
  public:

  // .google.protobuf.FileDescriptorProto msg_proto = 2;
  bool has_msg_proto() const;
  private:
  bool _internal_has_msg_proto() const;
  public:
  void clear_msg_proto();
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& msg_proto() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* release_msg_proto();
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* mutable_msg_proto();
  void set_allocated_msg_proto(::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* msg_proto);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& _internal_msg_proto() const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _internal_mutable_msg_proto();
  public:
  void unsafe_arena_set_allocated_msg_proto(
      ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* msg_proto);
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* unsafe_arena_release_msg_proto();

  // .google.protobuf.Any msg_content = 3;
  bool has_msg_content() const;
  private:
  bool _internal_has_msg_content() const;
  public:
  void clear_msg_content();
  const ::PROTOBUF_NAMESPACE_ID::Any& msg_content() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_msg_content();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_msg_content();
  void set_allocated_msg_content(::PROTOBUF_NAMESPACE_ID::Any* msg_content);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_msg_content() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg_content();
  public:
  void unsafe_arena_set_allocated_msg_content(
      ::PROTOBUF_NAMESPACE_ID::Any* msg_content);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_msg_content();

  // @@protoc_insertion_point(class_scope:EngineSpecific)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_name_;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* msg_proto_;
  ::PROTOBUF_NAMESPACE_ID::Any* msg_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dmp_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasicParameterFieldNumber = 1,
    kEngineSpecificFieldNumber = 2,
  };
  // string basic_parameter = 1;
  void clear_basic_parameter();
  const std::string& basic_parameter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_basic_parameter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_basic_parameter();
  PROTOBUF_NODISCARD std::string* release_basic_parameter();
  void set_allocated_basic_parameter(std::string* basic_parameter);
  private:
  const std::string& _internal_basic_parameter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basic_parameter(const std::string& value);
  std::string* _internal_mutable_basic_parameter();
  public:

  // .EngineSpecific engine_specific = 2;
  bool has_engine_specific() const;
  private:
  bool _internal_has_engine_specific() const;
  public:
  void clear_engine_specific();
  const ::EngineSpecific& engine_specific() const;
  PROTOBUF_NODISCARD ::EngineSpecific* release_engine_specific();
  ::EngineSpecific* mutable_engine_specific();
  void set_allocated_engine_specific(::EngineSpecific* engine_specific);
  private:
  const ::EngineSpecific& _internal_engine_specific() const;
  ::EngineSpecific* _internal_mutable_engine_specific();
  public:
  void unsafe_arena_set_allocated_engine_specific(
      ::EngineSpecific* engine_specific);
  ::EngineSpecific* unsafe_arena_release_engine_specific();

  // @@protoc_insertion_point(class_scope:State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basic_parameter_;
  ::EngineSpecific* engine_specific_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dmp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineSpecific

// string msg_name = 1;
inline void EngineSpecific::clear_msg_name() {
  msg_name_.ClearToEmpty();
}
inline const std::string& EngineSpecific::msg_name() const {
  // @@protoc_insertion_point(field_get:EngineSpecific.msg_name)
  return _internal_msg_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EngineSpecific::set_msg_name(ArgT0&& arg0, ArgT... args) {
 
 msg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EngineSpecific.msg_name)
}
inline std::string* EngineSpecific::mutable_msg_name() {
  std::string* _s = _internal_mutable_msg_name();
  // @@protoc_insertion_point(field_mutable:EngineSpecific.msg_name)
  return _s;
}
inline const std::string& EngineSpecific::_internal_msg_name() const {
  return msg_name_.Get();
}
inline void EngineSpecific::_internal_set_msg_name(const std::string& value) {
  
  msg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EngineSpecific::_internal_mutable_msg_name() {
  
  return msg_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EngineSpecific::release_msg_name() {
  // @@protoc_insertion_point(field_release:EngineSpecific.msg_name)
  return msg_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EngineSpecific::set_allocated_msg_name(std::string* msg_name) {
  if (msg_name != nullptr) {
    
  } else {
    
  }
  msg_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EngineSpecific.msg_name)
}

// .google.protobuf.FileDescriptorProto msg_proto = 2;
inline bool EngineSpecific::_internal_has_msg_proto() const {
  return this != internal_default_instance() && msg_proto_ != nullptr;
}
inline bool EngineSpecific::has_msg_proto() const {
  return _internal_has_msg_proto();
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& EngineSpecific::_internal_msg_proto() const {
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* p = msg_proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto&>(
      ::PROTOBUF_NAMESPACE_ID::_FileDescriptorProto_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& EngineSpecific::msg_proto() const {
  // @@protoc_insertion_point(field_get:EngineSpecific.msg_proto)
  return _internal_msg_proto();
}
inline void EngineSpecific::unsafe_arena_set_allocated_msg_proto(
    ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* msg_proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_proto_);
  }
  msg_proto_ = msg_proto;
  if (msg_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EngineSpecific.msg_proto)
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* EngineSpecific::release_msg_proto() {
  
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* temp = msg_proto_;
  msg_proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* EngineSpecific::unsafe_arena_release_msg_proto() {
  // @@protoc_insertion_point(field_release:EngineSpecific.msg_proto)
  
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* temp = msg_proto_;
  msg_proto_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* EngineSpecific::_internal_mutable_msg_proto() {
  
  if (msg_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FileDescriptorProto>(GetArenaForAllocation());
    msg_proto_ = p;
  }
  return msg_proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* EngineSpecific::mutable_msg_proto() {
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _msg = _internal_mutable_msg_proto();
  // @@protoc_insertion_point(field_mutable:EngineSpecific.msg_proto)
  return _msg;
}
inline void EngineSpecific::set_allocated_msg_proto(::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* msg_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_proto_);
  }
  if (msg_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_proto));
    if (message_arena != submessage_arena) {
      msg_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_proto, submessage_arena);
    }
    
  } else {
    
  }
  msg_proto_ = msg_proto;
  // @@protoc_insertion_point(field_set_allocated:EngineSpecific.msg_proto)
}

// .google.protobuf.Any msg_content = 3;
inline bool EngineSpecific::_internal_has_msg_content() const {
  return this != internal_default_instance() && msg_content_ != nullptr;
}
inline bool EngineSpecific::has_msg_content() const {
  return _internal_has_msg_content();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& EngineSpecific::_internal_msg_content() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = msg_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& EngineSpecific::msg_content() const {
  // @@protoc_insertion_point(field_get:EngineSpecific.msg_content)
  return _internal_msg_content();
}
inline void EngineSpecific::unsafe_arena_set_allocated_msg_content(
    ::PROTOBUF_NAMESPACE_ID::Any* msg_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_content_);
  }
  msg_content_ = msg_content;
  if (msg_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EngineSpecific.msg_content)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* EngineSpecific::release_msg_content() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = msg_content_;
  msg_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* EngineSpecific::unsafe_arena_release_msg_content() {
  // @@protoc_insertion_point(field_release:EngineSpecific.msg_content)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = msg_content_;
  msg_content_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* EngineSpecific::_internal_mutable_msg_content() {
  
  if (msg_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    msg_content_ = p;
  }
  return msg_content_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* EngineSpecific::mutable_msg_content() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_msg_content();
  // @@protoc_insertion_point(field_mutable:EngineSpecific.msg_content)
  return _msg;
}
inline void EngineSpecific::set_allocated_msg_content(::PROTOBUF_NAMESPACE_ID::Any* msg_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_content_);
  }
  if (msg_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_content));
    if (message_arena != submessage_arena) {
      msg_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_content, submessage_arena);
    }
    
  } else {
    
  }
  msg_content_ = msg_content;
  // @@protoc_insertion_point(field_set_allocated:EngineSpecific.msg_content)
}

// -------------------------------------------------------------------

// State

// string basic_parameter = 1;
inline void State::clear_basic_parameter() {
  basic_parameter_.ClearToEmpty();
}
inline const std::string& State::basic_parameter() const {
  // @@protoc_insertion_point(field_get:State.basic_parameter)
  return _internal_basic_parameter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_basic_parameter(ArgT0&& arg0, ArgT... args) {
 
 basic_parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:State.basic_parameter)
}
inline std::string* State::mutable_basic_parameter() {
  std::string* _s = _internal_mutable_basic_parameter();
  // @@protoc_insertion_point(field_mutable:State.basic_parameter)
  return _s;
}
inline const std::string& State::_internal_basic_parameter() const {
  return basic_parameter_.Get();
}
inline void State::_internal_set_basic_parameter(const std::string& value) {
  
  basic_parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_basic_parameter() {
  
  return basic_parameter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_basic_parameter() {
  // @@protoc_insertion_point(field_release:State.basic_parameter)
  return basic_parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_basic_parameter(std::string* basic_parameter) {
  if (basic_parameter != nullptr) {
    
  } else {
    
  }
  basic_parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basic_parameter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (basic_parameter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    basic_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:State.basic_parameter)
}

// .EngineSpecific engine_specific = 2;
inline bool State::_internal_has_engine_specific() const {
  return this != internal_default_instance() && engine_specific_ != nullptr;
}
inline bool State::has_engine_specific() const {
  return _internal_has_engine_specific();
}
inline void State::clear_engine_specific() {
  if (GetArenaForAllocation() == nullptr && engine_specific_ != nullptr) {
    delete engine_specific_;
  }
  engine_specific_ = nullptr;
}
inline const ::EngineSpecific& State::_internal_engine_specific() const {
  const ::EngineSpecific* p = engine_specific_;
  return p != nullptr ? *p : reinterpret_cast<const ::EngineSpecific&>(
      ::_EngineSpecific_default_instance_);
}
inline const ::EngineSpecific& State::engine_specific() const {
  // @@protoc_insertion_point(field_get:State.engine_specific)
  return _internal_engine_specific();
}
inline void State::unsafe_arena_set_allocated_engine_specific(
    ::EngineSpecific* engine_specific) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engine_specific_);
  }
  engine_specific_ = engine_specific;
  if (engine_specific) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.engine_specific)
}
inline ::EngineSpecific* State::release_engine_specific() {
  
  ::EngineSpecific* temp = engine_specific_;
  engine_specific_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EngineSpecific* State::unsafe_arena_release_engine_specific() {
  // @@protoc_insertion_point(field_release:State.engine_specific)
  
  ::EngineSpecific* temp = engine_specific_;
  engine_specific_ = nullptr;
  return temp;
}
inline ::EngineSpecific* State::_internal_mutable_engine_specific() {
  
  if (engine_specific_ == nullptr) {
    auto* p = CreateMaybeMessage<::EngineSpecific>(GetArenaForAllocation());
    engine_specific_ = p;
  }
  return engine_specific_;
}
inline ::EngineSpecific* State::mutable_engine_specific() {
  ::EngineSpecific* _msg = _internal_mutable_engine_specific();
  // @@protoc_insertion_point(field_mutable:State.engine_specific)
  return _msg;
}
inline void State::set_allocated_engine_specific(::EngineSpecific* engine_specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete engine_specific_;
  }
  if (engine_specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EngineSpecific>::GetOwningArena(engine_specific);
    if (message_arena != submessage_arena) {
      engine_specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engine_specific, submessage_arena);
    }
    
  } else {
    
  }
  engine_specific_ = engine_specific;
  // @@protoc_insertion_point(field_set_allocated:State.engine_specific)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dmp_2eproto
