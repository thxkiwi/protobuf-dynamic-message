// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Engine1Specific.proto

#include "Engine1Specific.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Engine1Specific::Engine1Specific(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field1_(0)
  , field2_(0)
  , field3_(0)
  , enabled_(false){}
struct Engine1SpecificDefaultTypeInternal {
  constexpr Engine1SpecificDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Engine1SpecificDefaultTypeInternal() {}
  union {
    Engine1Specific _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Engine1SpecificDefaultTypeInternal _Engine1Specific_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Engine1Specific_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Engine1Specific_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Engine1Specific_2eproto = nullptr;

const uint32_t TableStruct_Engine1Specific_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Engine1Specific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Engine1Specific, enabled_),
  PROTOBUF_FIELD_OFFSET(::Engine1Specific, field1_),
  PROTOBUF_FIELD_OFFSET(::Engine1Specific, field2_),
  PROTOBUF_FIELD_OFFSET(::Engine1Specific, field3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Engine1Specific)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Engine1Specific_default_instance_),
};

const char descriptor_table_protodef_Engine1Specific_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Engine1Specific.proto\"R\n\017Engine1Specif"
  "ic\022\017\n\007enabled\030\001 \001(\010\022\016\n\006field1\030\002 \001(\001\022\016\n\006f"
  "ield2\030\003 \001(\001\022\016\n\006field3\030\004 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Engine1Specific_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Engine1Specific_2eproto = {
  false, false, 115, descriptor_table_protodef_Engine1Specific_2eproto, "Engine1Specific.proto", 
  &descriptor_table_Engine1Specific_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_Engine1Specific_2eproto::offsets,
  file_level_metadata_Engine1Specific_2eproto, file_level_enum_descriptors_Engine1Specific_2eproto, file_level_service_descriptors_Engine1Specific_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Engine1Specific_2eproto_getter() {
  return &descriptor_table_Engine1Specific_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Engine1Specific_2eproto(&descriptor_table_Engine1Specific_2eproto);

// ===================================================================

class Engine1Specific::_Internal {
 public:
};

Engine1Specific::Engine1Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Engine1Specific)
}
Engine1Specific::Engine1Specific(const Engine1Specific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field1_, &from.field1_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:Engine1Specific)
}

inline void Engine1Specific::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(enabled_));
}

Engine1Specific::~Engine1Specific() {
  // @@protoc_insertion_point(destructor:Engine1Specific)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Engine1Specific::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Engine1Specific::ArenaDtor(void* object) {
  Engine1Specific* _this = reinterpret_cast< Engine1Specific* >(object);
  (void)_this;
}
void Engine1Specific::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Engine1Specific::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Engine1Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:Engine1Specific)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&field1_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Engine1Specific::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double field1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          field1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double field2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          field2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double field3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          field3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Engine1Specific::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Engine1Specific)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // double field1 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field1 = this->_internal_field1();
  uint64_t raw_field1;
  memcpy(&raw_field1, &tmp_field1, sizeof(tmp_field1));
  if (raw_field1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_field1(), target);
  }

  // double field2 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field2 = this->_internal_field2();
  uint64_t raw_field2;
  memcpy(&raw_field2, &tmp_field2, sizeof(tmp_field2));
  if (raw_field2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_field2(), target);
  }

  // double field3 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field3 = this->_internal_field3();
  uint64_t raw_field3;
  memcpy(&raw_field3, &tmp_field3, sizeof(tmp_field3));
  if (raw_field3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_field3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Engine1Specific)
  return target;
}

size_t Engine1Specific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Engine1Specific)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double field1 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field1 = this->_internal_field1();
  uint64_t raw_field1;
  memcpy(&raw_field1, &tmp_field1, sizeof(tmp_field1));
  if (raw_field1 != 0) {
    total_size += 1 + 8;
  }

  // double field2 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field2 = this->_internal_field2();
  uint64_t raw_field2;
  memcpy(&raw_field2, &tmp_field2, sizeof(tmp_field2));
  if (raw_field2 != 0) {
    total_size += 1 + 8;
  }

  // double field3 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field3 = this->_internal_field3();
  uint64_t raw_field3;
  memcpy(&raw_field3, &tmp_field3, sizeof(tmp_field3));
  if (raw_field3 != 0) {
    total_size += 1 + 8;
  }

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Engine1Specific::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Engine1Specific::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Engine1Specific::GetClassData() const { return &_class_data_; }

void Engine1Specific::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Engine1Specific *>(to)->MergeFrom(
      static_cast<const Engine1Specific &>(from));
}


void Engine1Specific::MergeFrom(const Engine1Specific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Engine1Specific)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field1 = from._internal_field1();
  uint64_t raw_field1;
  memcpy(&raw_field1, &tmp_field1, sizeof(tmp_field1));
  if (raw_field1 != 0) {
    _internal_set_field1(from._internal_field1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field2 = from._internal_field2();
  uint64_t raw_field2;
  memcpy(&raw_field2, &tmp_field2, sizeof(tmp_field2));
  if (raw_field2 != 0) {
    _internal_set_field2(from._internal_field2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_field3 = from._internal_field3();
  uint64_t raw_field3;
  memcpy(&raw_field3, &tmp_field3, sizeof(tmp_field3));
  if (raw_field3 != 0) {
    _internal_set_field3(from._internal_field3());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Engine1Specific::CopyFrom(const Engine1Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Engine1Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Engine1Specific::IsInitialized() const {
  return true;
}

void Engine1Specific::InternalSwap(Engine1Specific* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Engine1Specific, enabled_)
      + sizeof(Engine1Specific::enabled_)
      - PROTOBUF_FIELD_OFFSET(Engine1Specific, field1_)>(
          reinterpret_cast<char*>(&field1_),
          reinterpret_cast<char*>(&other->field1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Engine1Specific::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Engine1Specific_2eproto_getter, &descriptor_table_Engine1Specific_2eproto_once,
      file_level_metadata_Engine1Specific_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Engine1Specific* Arena::CreateMaybeMessage< ::Engine1Specific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Engine1Specific >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
