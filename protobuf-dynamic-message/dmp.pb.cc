// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmp.proto

#include "dmp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr EngineSpecific::EngineSpecific(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_proto_(nullptr)
  , msg_content_(nullptr){}
struct EngineSpecificDefaultTypeInternal {
  constexpr EngineSpecificDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineSpecificDefaultTypeInternal() {}
  union {
    EngineSpecific _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineSpecificDefaultTypeInternal _EngineSpecific_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basic_parameter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , engine_specific_(nullptr){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dmp_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dmp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dmp_2eproto = nullptr;

const uint32_t TableStruct_dmp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EngineSpecific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EngineSpecific, msg_name_),
  PROTOBUF_FIELD_OFFSET(::EngineSpecific, msg_proto_),
  PROTOBUF_FIELD_OFFSET(::EngineSpecific, msg_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::State, basic_parameter_),
  PROTOBUF_FIELD_OFFSET(::State, engine_specific_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::EngineSpecific)},
  { 9, -1, -1, sizeof(::State)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EngineSpecific_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_State_default_instance_),
};

const char descriptor_table_protodef_dmp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tdmp.proto\032\031google/protobuf/any.proto\032 "
  "google/protobuf/descriptor.proto\"\206\001\n\016Eng"
  "ineSpecific\022\020\n\010msg_name\030\001 \001(\t\0227\n\tmsg_pro"
  "to\030\002 \001(\0132$.google.protobuf.FileDescripto"
  "rProto\022)\n\013msg_content\030\003 \001(\0132\024.google.pro"
  "tobuf.Any\"J\n\005State\022\027\n\017basic_parameter\030\001 "
  "\001(\t\022(\n\017engine_specific\030\002 \001(\0132\017.EngineSpe"
  "cificb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dmp_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dmp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dmp_2eproto = {
  false, false, 293, descriptor_table_protodef_dmp_2eproto, "dmp.proto", 
  &descriptor_table_dmp_2eproto_once, descriptor_table_dmp_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_dmp_2eproto::offsets,
  file_level_metadata_dmp_2eproto, file_level_enum_descriptors_dmp_2eproto, file_level_service_descriptors_dmp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dmp_2eproto_getter() {
  return &descriptor_table_dmp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dmp_2eproto(&descriptor_table_dmp_2eproto);

// ===================================================================

class EngineSpecific::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& msg_proto(const EngineSpecific* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& msg_content(const EngineSpecific* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto&
EngineSpecific::_Internal::msg_proto(const EngineSpecific* msg) {
  return *msg->msg_proto_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
EngineSpecific::_Internal::msg_content(const EngineSpecific* msg) {
  return *msg->msg_content_;
}
void EngineSpecific::clear_msg_proto() {
  if (GetArenaForAllocation() == nullptr && msg_proto_ != nullptr) {
    delete msg_proto_;
  }
  msg_proto_ = nullptr;
}
void EngineSpecific::clear_msg_content() {
  if (GetArenaForAllocation() == nullptr && msg_content_ != nullptr) {
    delete msg_content_;
  }
  msg_content_ = nullptr;
}
EngineSpecific::EngineSpecific(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EngineSpecific)
}
EngineSpecific::EngineSpecific(const EngineSpecific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_name().empty()) {
    msg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_msg_proto()) {
    msg_proto_ = new ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto(*from.msg_proto_);
  } else {
    msg_proto_ = nullptr;
  }
  if (from._internal_has_msg_content()) {
    msg_content_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.msg_content_);
  } else {
    msg_content_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EngineSpecific)
}

inline void EngineSpecific::SharedCtor() {
msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_proto_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_content_) -
    reinterpret_cast<char*>(&msg_proto_)) + sizeof(msg_content_));
}

EngineSpecific::~EngineSpecific() {
  // @@protoc_insertion_point(destructor:EngineSpecific)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EngineSpecific::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_proto_;
  if (this != internal_default_instance()) delete msg_content_;
}

void EngineSpecific::ArenaDtor(void* object) {
  EngineSpecific* _this = reinterpret_cast< EngineSpecific* >(object);
  (void)_this;
}
void EngineSpecific::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineSpecific::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineSpecific::Clear() {
// @@protoc_insertion_point(message_clear_start:EngineSpecific)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && msg_proto_ != nullptr) {
    delete msg_proto_;
  }
  msg_proto_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msg_content_ != nullptr) {
    delete msg_content_;
  }
  msg_content_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineSpecific::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EngineSpecific.msg_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FileDescriptorProto msg_proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_proto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any msg_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineSpecific::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EngineSpecific)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_name = 1;
  if (!this->_internal_msg_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_name().data(), static_cast<int>(this->_internal_msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EngineSpecific.msg_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_name(), target);
  }

  // .google.protobuf.FileDescriptorProto msg_proto = 2;
  if (this->_internal_has_msg_proto()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_proto(this), target, stream);
  }

  // .google.protobuf.Any msg_content = 3;
  if (this->_internal_has_msg_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg_content(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EngineSpecific)
  return target;
}

size_t EngineSpecific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EngineSpecific)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_name = 1;
  if (!this->_internal_msg_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_name());
  }

  // .google.protobuf.FileDescriptorProto msg_proto = 2;
  if (this->_internal_has_msg_proto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_proto_);
  }

  // .google.protobuf.Any msg_content = 3;
  if (this->_internal_has_msg_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_content_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineSpecific::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EngineSpecific::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineSpecific::GetClassData() const { return &_class_data_; }

void EngineSpecific::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EngineSpecific *>(to)->MergeFrom(
      static_cast<const EngineSpecific &>(from));
}


void EngineSpecific::MergeFrom(const EngineSpecific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EngineSpecific)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_name().empty()) {
    _internal_set_msg_name(from._internal_msg_name());
  }
  if (from._internal_has_msg_proto()) {
    _internal_mutable_msg_proto()->::PROTOBUF_NAMESPACE_ID::FileDescriptorProto::MergeFrom(from._internal_msg_proto());
  }
  if (from._internal_has_msg_content()) {
    _internal_mutable_msg_content()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_msg_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineSpecific::CopyFrom(const EngineSpecific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EngineSpecific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineSpecific::IsInitialized() const {
  if (_internal_has_msg_proto()) {
    if (!msg_proto_->IsInitialized()) return false;
  }
  return true;
}

void EngineSpecific::InternalSwap(EngineSpecific* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_name_, lhs_arena,
      &other->msg_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineSpecific, msg_content_)
      + sizeof(EngineSpecific::msg_content_)
      - PROTOBUF_FIELD_OFFSET(EngineSpecific, msg_proto_)>(
          reinterpret_cast<char*>(&msg_proto_),
          reinterpret_cast<char*>(&other->msg_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineSpecific::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dmp_2eproto_getter, &descriptor_table_dmp_2eproto_once,
      file_level_metadata_dmp_2eproto[0]);
}

// ===================================================================

class State::_Internal {
 public:
  static const ::EngineSpecific& engine_specific(const State* msg);
};

const ::EngineSpecific&
State::_Internal::engine_specific(const State* msg) {
  return *msg->engine_specific_;
}
State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basic_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    basic_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basic_parameter().empty()) {
    basic_parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basic_parameter(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_engine_specific()) {
    engine_specific_ = new ::EngineSpecific(*from.engine_specific_);
  } else {
    engine_specific_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:State)
}

inline void State::SharedCtor() {
basic_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  basic_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
engine_specific_ = nullptr;
}

State::~State() {
  // @@protoc_insertion_point(destructor:State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  basic_parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete engine_specific_;
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basic_parameter_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && engine_specific_ != nullptr) {
    delete engine_specific_;
  }
  engine_specific_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string basic_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_basic_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "State.basic_parameter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EngineSpecific engine_specific = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_engine_specific(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string basic_parameter = 1;
  if (!this->_internal_basic_parameter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basic_parameter().data(), static_cast<int>(this->_internal_basic_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "State.basic_parameter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basic_parameter(), target);
  }

  // .EngineSpecific engine_specific = 2;
  if (this->_internal_has_engine_specific()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::engine_specific(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string basic_parameter = 1;
  if (!this->_internal_basic_parameter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basic_parameter());
  }

  // .EngineSpecific engine_specific = 2;
  if (this->_internal_has_engine_specific()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *engine_specific_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*State::GetClassData() const { return &_class_data_; }

void State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<State *>(to)->MergeFrom(
      static_cast<const State &>(from));
}


void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_basic_parameter().empty()) {
    _internal_set_basic_parameter(from._internal_basic_parameter());
  }
  if (from._internal_has_engine_specific()) {
    _internal_mutable_engine_specific()->::EngineSpecific::MergeFrom(from._internal_engine_specific());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (_internal_has_engine_specific()) {
    if (!engine_specific_->IsInitialized()) return false;
  }
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &basic_parameter_, lhs_arena,
      &other->basic_parameter_, rhs_arena
  );
  swap(engine_specific_, other->engine_specific_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dmp_2eproto_getter, &descriptor_table_dmp_2eproto_once,
      file_level_metadata_dmp_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EngineSpecific* Arena::CreateMaybeMessage< ::EngineSpecific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EngineSpecific >(arena);
}
template<> PROTOBUF_NOINLINE ::State* Arena::CreateMaybeMessage< ::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::State >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
